#!/bin/bash

# Script de Despliegue Automatizado - SIS313
# Universidad San Francisco Xavier de Chuquisaca
# Proyecto Final - Infraestructura de Aplicaciones Web

set -euo pipefail

# Configuraci√≥n
REPO_URL="https://github.com/usuario/proyecto-final-sis313.git"
APP_DIR="/opt/aplicacion-nodejs"
BACKUP_DIR="/opt/backups/deployments"
LOG_FILE="/var/log/deployment.log"
NODE_ENV="production"

# Servidores de aplicaci√≥n
SERVERS=("192.168.218.101" "192.168.218.103")
SSH_USER="deploy"
SSH_KEY="/home/deploy/.ssh/id_rsa"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funci√≥n de logging
log_mensaje() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Funci√≥n para ejecutar comandos remotos
ejecutar_remoto() {
    local servidor=$1
    local comando=$2
    
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_USER@$servidor" "$comando"
}

# Funci√≥n para verificar prerrequisitos
verificar_prerrequisitos() {
    echo -e "${YELLOW}üîç VERIFICANDO PRERREQUISITOS${NC}"
    echo "----------------------------------------"
    
    # Verificar git
    if ! command -v git &> /dev/null; then
        echo -e "‚ùå Git no est√° instalado"
        exit 1
    fi
    
    # Verificar Node.js
    if ! command -v node &> /dev/null; then
        echo -e "‚ùå Node.js no est√° instalado"
        exit 1
    fi
    
    # Verificar npm
    if ! command -v npm &> /dev/null; then
        echo -e "‚ùå npm no est√° instalado"
        exit 1
    fi
    
    # Verificar conectividad a servidores
    for servidor in "${SERVERS[@]}"; do
        if ! ping -c 1 "$servidor" &>/dev/null; then
            echo -e "‚ùå No se puede conectar a $servidor"
            exit 1
        fi
    done
    
    echo -e "‚úÖ Todos los prerrequisitos verificados"
}

# Funci√≥n para crear backup antes del despliegue
crear_backup_pre_deploy() {
    echo -e "\n${YELLOW}üíæ CREANDO BACKUP PRE-DESPLIEGUE${NC}"
    echo "----------------------------------------"
    
    local fecha=$(date +"%Y%m%d_%H%M%S")
    mkdir -p "$BACKUP_DIR"
    
    if [ -d "$APP_DIR" ]; then
        local backup_file="$BACKUP_DIR/pre_deploy_${fecha}.tar.gz"
        if tar -czf "$backup_file" -C "$(dirname "$APP_DIR")" "$(basename "$APP_DIR")"; then
            echo -e "‚úÖ Backup creado: $backup_file"
            log_mensaje "Backup pre-despliegue creado: $backup_file"
        else
            echo -e "‚ùå Error creando backup"
            exit 1
        fi
    else
        echo -e "‚ÑπÔ∏è  No existe instalaci√≥n previa para respaldar"
    fi
}

# Funci√≥n para descargar c√≥digo
descargar_codigo() {
    echo -e "\n${YELLOW}üì• DESCARGANDO C√ìDIGO FUENTE${NC}"
    echo "----------------------------------------"
    
    local temp_dir="/tmp/deploy_$(date +%s)"
    
    if git clone "$REPO_URL" "$temp_dir"; then
        echo -e "‚úÖ C√≥digo descargado exitosamente"
        
        # Mover c√≥digo a directorio de aplicaci√≥n
        mkdir -p "$APP_DIR"
        cp -r "$temp_dir"/* "$APP_DIR/"
        rm -rf "$temp_dir"
        
        log_mensaje "C√≥digo fuente actualizado desde repositorio"
    else
        echo -e "‚ùå Error descargando c√≥digo"
        exit 1
    fi
}

# Funci√≥n para instalar dependencias
instalar_dependencias() {
    echo -e "\n${YELLOW}üì¶ INSTALANDO DEPENDENCIAS${NC}"
    echo "----------------------------------------"
    
    cd "$APP_DIR"
    
    if [ -f "package.json" ]; then
        # Limpiar node_modules si existe
        if [ -d "node_modules" ]; then
            rm -rf node_modules
        fi
        
        # Instalar dependencias
        if npm ci --only=production; then
            echo -e "‚úÖ Dependencias instaladas correctamente"
            log_mensaje "Dependencias Node.js instaladas"
        else
            echo -e "‚ùå Error instalando dependencias"
            exit 1
        fi
    else
        echo -e "‚ùå No se encontr√≥ package.json"
        exit 1
    fi
}

# Funci√≥n para ejecutar tests
ejecutar_tests() {
    echo -e "\n${YELLOW}üß™ EJECUTANDO TESTS${NC}"
    echo "----------------------------------------"
    
    cd "$APP_DIR"
    
    if npm run test --if-present; then
        echo -e "‚úÖ Tests ejecutados correctamente"
        log_mensaje "Tests pasaron exitosamente"
    else
        echo -e "‚ö†Ô∏è  Tests fallaron o no est√°n configurados"
        log_mensaje "Tests fallaron - continuando despliegue"
    fi
}

# Funci√≥n para configurar variables de entorno
configurar_ambiente() {
    echo -e "\n${YELLOW}‚öôÔ∏è  CONFIGURANDO AMBIENTE${NC}"
    echo "----------------------------------------"
    
    cd "$APP_DIR"
    
    # Crear archivo .env si no existe
    if [ ! -f ".env" ]; then
        cat > .env << EOF
# Configuraci√≥n de Producci√≥n SIS313
NODE_ENV=production
PORT=3000
SERVER_NAME=\$(hostname)

# Base de Datos
DB_HOST=192.168.218.102
DB_USER=usuario_bd
DB_PASS=clave_bd_segura_123
DB_NAME=sistema_clientes

# Configuraci√≥n de Logs
LOG_LEVEL=info
LOG_FILE=/var/log/aplicacion-nodejs/app.log

# Configuraci√≥n de Seguridad
SESSION_SECRET=clave_sesion_super_secreta_2024
JWT_SECRET=jwt_token_secreto_sis313

# Configuraci√≥n de Email (opcional)
SMTP_HOST=smtp.usfx.bo
SMTP_PORT=587
SMTP_USER=noreply@sis313.usfx.bo
SMTP_PASS=password_email
EOF
        echo -e "‚úÖ Archivo .env creado"
    else
        echo -e "‚ÑπÔ∏è  Archivo .env ya existe"
    fi
    
    # Configurar permisos
    chown -R nodejs:nodejs "$APP_DIR"
    chmod 640 .env
    
    log_mensaje "Ambiente de producci√≥n configurado"
}

# Funci√≥n para reiniciar servicios
reiniciar_servicios() {
    echo -e "\n${YELLOW}üîÑ REINICIANDO SERVICIOS${NC}"
    echo "----------------------------------------"
    
    # Reiniciar aplicaci√≥n Node.js
    if systemctl is-active --quiet aplicacion-nodejs; then
        if systemctl restart aplicacion-nodejs; then
            echo -e "‚úÖ Servicio aplicacion-nodejs reiniciado"
        else
            echo -e "‚ùå Error reiniciando aplicacion-nodejs"
            exit 1
        fi
    else
        if systemctl start aplicacion-nodejs; then
            echo -e "‚úÖ Servicio aplicacion-nodejs iniciado"
        else
            echo -e "‚ùå Error iniciando aplicacion-nodejs"
            exit 1
        fi
    fi
    
    # Esperar que el servicio est√© completamente levantado
    sleep 5
    
    # Verificar que el servicio responde
    if curl -s -f "http://localhost:3000/health" > /dev/null; then
        echo -e "‚úÖ Aplicaci√≥n responde correctamente"
        log_mensaje "Aplicaci√≥n desplegada y funcionando"
    else
        echo -e "‚ùå Aplicaci√≥n no responde"
        log_mensaje "Error: Aplicaci√≥n no responde despu√©s del despliegue"
        exit 1
    fi
}

# Funci√≥n para verificar despliegue
verificar_despliegue() {
    echo -e "\n${YELLOW}‚úÖ VERIFICANDO DESPLIEGUE${NC}"
    echo "----------------------------------------"
    
    local errores=0
    
    # Verificar servicio systemd
    if systemctl is-active --quiet aplicacion-nodejs; then
        echo -e "‚úÖ Servicio systemd: ACTIVO"
    else
        echo -e "‚ùå Servicio systemd: INACTIVO"
        ((errores++))
    fi
    
    # Verificar puerto de aplicaci√≥n
    if netstat -tuln | grep -q ":3000 "; then
        echo -e "‚úÖ Puerto 3000: ESCUCHANDO"
    else
        echo -e "‚ùå Puerto 3000: NO DISPONIBLE"
        ((errores++))
    fi
    
    # Verificar endpoint de salud
    if curl -s -f "http://localhost:3000/health" > /dev/null; then
        echo -e "‚úÖ Health check: EXITOSO"
    else
        echo -e "‚ùå Health check: FALLO"
        ((errores++))
    fi
    
    # Verificar logs de aplicaci√≥n
    if journalctl -u aplicacion-nodejs --since "1 minute ago" --no-pager | grep -q "Servidor iniciado"; then
        echo -e "‚úÖ Logs de aplicaci√≥n: CORRECTOS"
    else
        echo -e "‚ö†Ô∏è  Logs de aplicaci√≥n: REVISAR"
    fi
    
    # Verificar conexi√≥n a base de datos
    if timeout 5 bash -c "</dev/tcp/192.168.218.102/3306" 2>/dev/null; then
        echo -e "‚úÖ Conexi√≥n a BD: EXITOSA"
    else
        echo -e "‚ùå Conexi√≥n a BD: FALLO"
        ((errores++))
    fi
    
    return $errores
}

# Funci√≥n para despliegue en cluster
desplegar_cluster() {
    echo -e "\n${YELLOW}üåê DESPLEGANDO EN CLUSTER${NC}"
    echo "----------------------------------------"
    
    for servidor in "${SERVERS[@]}"; do
        echo -e "\nüñ•Ô∏è  Desplegando en servidor: $servidor"
        
        # Sincronizar c√≥digo
        if rsync -avz --delete "$APP_DIR/" "$SSH_USER@$servidor:$APP_DIR/"; then
            echo -e "  ‚úÖ C√≥digo sincronizado"
        else
            echo -e "  ‚ùå Error sincronizando c√≥digo"
            continue
        fi
        
        # Instalar dependencias remotamente
        if ejecutar_remoto "$servidor" "cd $APP_DIR && npm ci --only=production"; then
            echo -e "  ‚úÖ Dependencias instaladas"
        else
            echo -e "  ‚ùå Error instalando dependencias"
            continue
        fi
        
        # Reiniciar servicio remoto
        if ejecutar_remoto "$servidor" "sudo systemctl restart aplicacion-nodejs"; then
            echo -e "  ‚úÖ Servicio reiniciado"
        else
            echo -e "  ‚ùå Error reiniciando servicio"
            continue
        fi
        
        # Verificar servicio remoto
        sleep 3
        if ejecutar_remoto "$servidor" "curl -s -f http://localhost:3000/health"; then
            echo -e "  ‚úÖ Verificaci√≥n exitosa"
            log_mensaje "Despliegue exitoso en servidor $servidor"
        else
            echo -e "  ‚ùå Verificaci√≥n fall√≥"
            log_mensaje "Error en despliegue en servidor $servidor"
        fi
    done
}

# Funci√≥n para rollback
rollback() {
    echo -e "\n${RED}üîÑ EJECUTANDO ROLLBACK${NC}"
    echo "----------------------------------------"
    
    local ultimo_backup=$(ls -t "$BACKUP_DIR"/pre_deploy_*.tar.gz 2>/dev/null | head -1)
    
    if [ -n "$ultimo_backup" ]; then
        echo -e "üì¶ Restaurando desde: $ultimo_backup"
        
        # Detener servicio
        systemctl stop aplicacion-nodejs
        
        # Restaurar backup
        rm -rf "$APP_DIR"
        tar -xzf "$ultimo_backup" -C "$(dirname "$APP_DIR")"
        
        # Reiniciar servicio
        systemctl start aplicacion-nodejs
        
        if systemctl is-active --quiet aplicacion-nodejs; then
            echo -e "‚úÖ Rollback completado exitosamente"
            log_mensaje "Rollback ejecutado exitosamente"
        else
            echo -e "‚ùå Error en rollback"
            log_mensaje "Error ejecutando rollback"
        fi
    else
        echo -e "‚ùå No se encontraron backups para rollback"
        log_mensaje "No hay backups disponibles para rollback"
    fi
}

# FUNCI√ìN PRINCIPAL
main() {
    echo -e "${BLUE}===========================================${NC}"
    echo -e "${BLUE}    DESPLIEGUE AUTOMATIZADO SIS313       ${NC}"
    echo -e "${BLUE}===========================================${NC}"
    
    log_mensaje "Iniciando proceso de despliegue"
    
    # Verificar si se solicita rollback
    if [ "${1:-}" = "rollback" ]; then
        rollback
        exit 0
    fi
    
    # Proceso normal de despliegue
    verificar_prerrequisitos
    crear_backup_pre_deploy
    descargar_codigo
    instalar_dependencias
    ejecutar_tests
    configurar_ambiente
    reiniciar_servicios
    
    if verificar_despliegue; then
        echo -e "\nüéâ ${GREEN}¬°DESPLIEGUE COMPLETADO EXITOSAMENTE!${NC}"
        log_mensaje "Despliegue completado exitosamente"
        
        # Desplegar en otros servidores del cluster
        if [ "${1:-}" = "cluster" ]; then
            desplegar_cluster
        fi
    else
        echo -e "\n‚ùå ${RED}DESPLIEGUE FALL√ì - EJECUTANDO ROLLBACK${NC}"
        log_mensaje "Despliegue fall√≥ - ejecutando rollback autom√°tico"
        rollback
        exit 1
    fi
    
    echo -e "\nüìä RESUMEN DEL DESPLIEGUE"
    echo "----------------------------------------"
    echo -e "üìÖ Fecha: $(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "üìÇ Directorio: $APP_DIR"
    echo -e "üîó Repositorio: $REPO_URL"
    echo -e "üìã Log: $LOG_FILE"
    echo -e "üîÑ Para rollback: $0 rollback"
    echo -e "üåê Para cluster: $0 cluster"
}

# Verificar si el script se ejecuta como root o con sudo
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå Este script debe ejecutarse como root o con sudo${NC}"
    exit 1
fi

# Ejecutar funci√≥n principal
main "$@"
